
#Class


Puppet classes are defined as a collection of resources, which are grouped together in order to get a target node or machine
in a desired state. These classes are defined inside Puppet manifest files which is located inside Puppet modules.


Master 

[ec2-user@puppet ~]#sudo su -
[root@puppet ~]# cd /etc/puppet/environments/production/

Go to the java module generated in the previous step. Refer modules section

[root@puppet ~]# cd modules/java

Create a file [install.pp] which will be our manifest file. Inside the manifest we shall define the class which will encapsulate the 
code to install java. Standard convention would be to create a class for each feature.  

For Exp:- install.pp to install a software. 
          deploy.pp to deploy a war file to tomcat
          ssl.pp to configure SSL 

[root@puppet ~]# cd /etc/puppetlabs/code/environments/production/modules/java/manifests/

Create a file [install.pp] to install JDK. Copy below content to install.pp. The namespace here is java.   

class java::install {
 package { ['epel-release','java-1.8.0-openjdk-devel']:
    ensure => installed,
  }
}

Once the class is defined, we should be able to access it from the manifest file. Please note that the class is defined under the 
package java/maifests folder.  


Defining Node
-------------

How do we tell puppet which all nodes this manifest need to be applied ? Lets say we want to install the DB only on a set of 
agents. Node definition is the way to solve this.

[root@puppet ~]# cd /etc/puppet/environments/production/manifests/     


Create the node definition manifest file (Lets say app.pp under manifests directory) and copy the below code which calls the install class. 
It will be applicable to puppet-agent1 and puppet-agent2 and the java will be installed on both the agents.


node "puppet-agent1","puppet-agent2" {
    include java::install
}

Above definition tells puppet to call the java::install class and apply only on puppet-agent1 and puppet-agent1. Whenever the "puppet agent -t" is issued 
from the agent nodes, it checks whether "java::install" is defined for that agent and shall install java in that agent.


If we run the "puppet agent -t" from puppet-agent1, it will install java on that node. 


What if we try to run it from an agent which is not defined in the node definition? Lets say from puppet-agent3..

Puppet shall now throw an error with a description "Could not find node name "default" or puppet-agent3.....". 
As soon as you start using node definition, puppet tries to find a node definition for the agent node. If it does not find a matching
agent node name, it will see if a default node definition is defined. In order to mitigate this, we could create a default block.

Add the below content in app.pp. Now we have node definition for "puppet-agent1","puppet-agent2" along with default node definition

node "puppet-agent1","puppet-agent2" {
    include java::install
}

node default{
    notify { 'Default node definition ': }  
}


The notify resource is very useful for debugging. It prints this message while running the puppet manifest. 
If you run "puppet agent -t" from any agent which is not defined explicitly (Lets say puppet-agent3), it will print the 
message 'Default node definition'










