
## RESOURCES

Resources are the basic building blocks of puppet. Puppet treats your infrastructure as a collection of entities which is described 
through resources. In other words, the resources consists of one or more statements which define the configurations of the infrastructure. 
The resources written using Puppet DSL (Domain specific language). Once we write the DSL, it gets converted into system specific providers which ensure 
the requested configuration is made on the environment. 

For Exp:-  To add a new user into a client machine, puppet uses the 'user' resource which when executed uses the provider corresponding 
to the environment. The agent machine might run on different operating systems and to create a user in each operating system is different.
Puppet ensure that it calls the provider belonging to the underlying operating system and make sure the user is created with the specified
properties are created.



# First puppet resource

Create a user resource using the below DSL. By default the puppet first checks the /etc/puppetlabs/code/environments/production/manifests/site.pp 
to verify the presence of any resource details. You may run it from puppet server (puppet apply filename) or can be triggered from the agent using 
'puppet agent -t'.  Once the test is triggered from the agent, validate whether the desired state is attained by the puppet. 


Create /etc/puppetlabs/code/environments/production/manifests/site.pp if not present. Basic testng of resource types, we could edit this file and test it. 


1) Create a new user with name 'deploy'

user  { "deploy":
  ensure      =>  present,
  uild        =>  5001,
  password    =>  '$1$DRWSFJBm$OgItqgjb8VYCO0VO2wGUf0',
  home        =>  '/home/deploy',
  managehome  =>  'true',
}


To verify and run the resource from master

puppet parser validate user.pp
puppet apply --nop user.pp
id deploy   (To confirm the user is present or not)


If it is to be triggered when running puppet agent -t from the agent, the content need to be available in site.pp. 



Install a package
================

package { 'tree':
  ensure => installed,
}

package { ['wget','curl','git']:
  ensure => installed,  
}

user { 'deploy':
  ensure => absent,  
}



File
=====

file { '/opt/gitrepo':
  ensure => directory,
  owner  => root,
  group  => root,
  mode   => 755,
}


file { '/opt/gitrepo/Hello.java':
  ensure  => present,
  owner   => root,
  group   => root,
  mode    => 755,
  content => 'class Hello { public static void main(String args) { System.out.println("Hello") }}';
}



exec

exec { 'download_curl':
  command => "wget http://apachemirror.wuchna.com/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz",  
  cwd     => '/var/tmp/hello',
  path    => '/usr/bin:/user/sbin:/bin:/usr/local/bin',
  creates => '/opt/apache-maven-3.6.3-bin.tar.gz',  
  notify  => Exec['extract_maven_zip_file']  
}


exec { 'extract_maven_zip_file':
  command       => "tar -xvf apache-maven-3.6.3-bin.tar.gz",  
  cwd           => '/var/tmp/hello',
  path          => '/usr/bin:/user/sbin:/bin:/usr/local/bin',
  refresh_only  =>  true
  cwd           => '/opt/',  
  user          => 'root',  
}


exec { 'extract_maven_zip_file':
  command       => "tar -xvf apache-maven-3.6.3-bin.tar.gz",  
  cwd           => '/var/tmp/hello',
  path          => '/usr/bin:/user/sbin:/bin:/usr/local/bin',
  only_if       =>  true
  cwd           => '/opt/',  
  user          => 'root',  
}











